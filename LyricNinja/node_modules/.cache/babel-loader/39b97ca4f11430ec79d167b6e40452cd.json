{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Peran\\\\LyricNinja\\\\Lyric_Ninja\\\\src\\\\components\\\\MainWord.tsx\";\nimport React, { useState, useEffect, useRef } from 'react';\n\nconst MainWord = ({\n  words,\n  wordIndex,\n  visible\n}) => {\n  const [progress, setProgress] = useState(0);\n  const [wordToShow, setWordToShow] = useState(initialWord);\n  const [nextWord, setNextWord] = useState(word);\n  const duration = 3;\n  const animationFrameHandle = useRef(0);\n  const prevTime = useRef(performance.now());\n  const outputValueRange = 1;\n\n  function easeIn(x) {\n    return Math.pow(Math.min(1, x * 2), 2);\n  }\n\n  function easeOut(x) {\n    return 1 - Math.pow(1 - x, 3);\n  }\n\n  useEffect(() => {\n    if (progress > 0) {\n      setProgress(0); // console.log(\"Click in progress!\")\n      // console.log(\"wordToshow: \"+wordToShow+\" NextWord: \"+nextWord+\" Word: \"+word);\n      // visible = !visible;\n      // setWordToShow(nextWord);\n      // setNextWord(word);\n      // console.log(\"wordToshow: \"+wordToShow+\" NextWord: \"+nextWord+\" Word: \"+word);\n    }\n\n    prevTime.current = performance.now();\n\n    function render(timestamp) {\n      animationFrameHandle.current = requestAnimationFrame(render);\n      setProgress(oldValue => {\n        if (oldValue >= 1) {\n          // console.log(\"Animation Finished!\")\n          // console.log(\"wordToshow: \"+wordToShow+\" NextWord: \"+nextWord+\" Word: \"+word);\n          // console.log(\"wordToshow: \"+wordToShow+\" NextWord: \"+nextWord+\" Word: \"+word);\n          cancelAnimationFrame(animationFrameHandle.current);\n          visible = !visible;\n          setWordToShow(nextWord);\n          setNextWord(word);\n          return 0;\n        }\n\n        const secondsElapsed = (timestamp - prevTime.current) / 1000;\n        return Math.min(oldValue + outputValueRange * secondsElapsed / duration, 1);\n      });\n      prevTime.current = timestamp;\n    }\n\n    render(performance.now());\n    return () => cancelAnimationFrame(animationFrameHandle.current);\n  }, [visible, word]);\n\n  if (visible) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main-word\",\n      style: {\n        opacity: 1 - 1.2 * easeIn(progress),\n        transform: `translateX(${-100 * easeIn(progress)}%)`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }, wordToShow);\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main-word\",\n      style: {\n        opacity: easeOut(progress),\n        transform: `translateX(${100 - 100 * easeOut(progress)}%)`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }, nextWord);\n  }\n};\n\nexport default MainWord;","map":{"version":3,"sources":["C:/Users/Peran/LyricNinja/Lyric_Ninja/src/components/MainWord.tsx"],"names":["React","useState","useEffect","useRef","MainWord","words","wordIndex","visible","progress","setProgress","wordToShow","setWordToShow","initialWord","nextWord","setNextWord","word","duration","animationFrameHandle","prevTime","performance","now","outputValueRange","easeIn","x","Math","pow","min","easeOut","current","render","timestamp","requestAnimationFrame","oldValue","cancelAnimationFrame","secondsElapsed","opacity","transform"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Console } from 'console';\r\n\r\n\r\ninterface MainWordProps {\r\n    words: string[];\r\n    wordIndex: number;\r\n    visible: boolean;\r\n}\r\n\r\n\r\nconst MainWord: React.FC<MainWordProps> = ({ words, wordIndex, visible}) => {\r\n\r\n    const [progress, setProgress] = useState(0);\r\n    const [wordToShow, setWordToShow] = useState(initialWord);\r\n    const [nextWord, setNextWord] = useState(word);\r\n    const duration = 3;\r\n    const animationFrameHandle = useRef(0);\r\n    const prevTime = useRef(performance.now());\r\n    const outputValueRange = 1;\r\n\r\n    function easeIn(x: number): number {\r\n        return Math.pow(Math.min(1, x*2), 2);\r\n    }\r\n\r\n    function easeOut(x: number): number {\r\n        return 1 - Math.pow(1 - x, 3);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (progress > 0) {\r\n            setProgress(0);\r\n            // console.log(\"Click in progress!\")\r\n            // console.log(\"wordToshow: \"+wordToShow+\" NextWord: \"+nextWord+\" Word: \"+word);\r\n            // visible = !visible;\r\n            // setWordToShow(nextWord);\r\n            // setNextWord(word);\r\n            // console.log(\"wordToshow: \"+wordToShow+\" NextWord: \"+nextWord+\" Word: \"+word);\r\n        }\r\n        prevTime.current = performance.now();\r\n        function render(timestamp: DOMHighResTimeStamp) {\r\n            animationFrameHandle.current = requestAnimationFrame(render);\r\n            setProgress(oldValue => {\r\n                if (oldValue >= 1) {\r\n                    // console.log(\"Animation Finished!\")\r\n                    // console.log(\"wordToshow: \"+wordToShow+\" NextWord: \"+nextWord+\" Word: \"+word);\r\n                    // console.log(\"wordToshow: \"+wordToShow+\" NextWord: \"+nextWord+\" Word: \"+word);\r\n\r\n                    cancelAnimationFrame(animationFrameHandle.current);\r\n                    visible = !visible;\r\n                    setWordToShow(nextWord);\r\n                    setNextWord(word);\r\n                    return 0;\r\n                } \r\n                const secondsElapsed = (timestamp - prevTime.current) / 1000;\r\n                return Math.min(oldValue + outputValueRange * secondsElapsed / duration, 1);\r\n            })\r\n            prevTime.current = timestamp;\r\n        }\r\n\r\n        render(performance.now());\r\n        return () => cancelAnimationFrame(animationFrameHandle.current);\r\n    }, [visible, word])\r\n    if (visible) {\r\n        return (\r\n            <div className=\"main-word\" style={{ opacity: 1-1.2*easeIn(progress), transform: `translateX(${-100*easeIn(progress)}%)`}}>\r\n              {wordToShow}\r\n            </div>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <div className=\"main-word\" style={{ opacity: easeOut(progress), transform: `translateX(${100-100*easeOut(progress)}%)`}}>\r\n                {nextWord}\r\n            </div>\r\n        );\r\n    }\r\n  };\r\n\r\nexport default MainWord;\r\n  "]},"metadata":{},"sourceType":"module"}