{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Peran\\\\LyricNinja\\\\Lyric_Ninja\\\\src\\\\components\\\\Words.tsx\";\nimport React, { useState } from 'react';\nimport ProgressBar from './ProgressBar';\nimport WordsDisplay from './WordsDisplay';\nimport Chevrons from './Chevrons';\n\nconst Words = () => {\n  // const [words, setCurrentWord] = useState(\"apple\");\n  // const [nextWord, setNextWord] = useState(\"aa\");\n  const [words, setWords] = useState([\"apple\", \"banana\"]);\n  const [rhymes, setRhymes] = useState([[\"apple\", \"banana\", \"cat\", \"dog\", \"apple\", \"banana\", \"cat\", \"dog\"], [\"apple\", \"banana\", \"cat\", \"dog\", \"apple\", \"banana\", \"cat\", \"dog\"]]);\n  const [showFirst, setShowFirst] = useState(true);\n  const [firstIndex, setFirstIndex] = useState(0);\n  const [secondIndex, setSecondIndex] = useState(-1);\n  const [counter, setCounter] = useState(0);\n  const [forward, setForward] = useState(true);\n  const maxWordHistory = 6;\n\n  function getRhymes(word) {\n    return [word + \"1\", word + \"2\", word + \"3\", word + \"4\", word + \"5\", word + \"6\", word + \"7\", word + \"8\"];\n  }\n\n  function getNewWord() {\n    setCounter(counter + 1);\n    return \"extra\" + counter;\n  }\n\n  function forwardWord() {\n    let nextFirstIndex = firstIndex;\n    let nextSecondIndex = secondIndex;\n\n    if (Math.max(secondIndex, firstIndex) + 1 >= words.length) {\n      const newWords = [...words];\n      const newWord = getNewWord();\n      console.log(newWord);\n      const newRhymes = [...rhymes];\n      console.log(newRhymes);\n      newRhymes.push(getRhymes(newWord));\n      newWords.push(newWord);\n\n      if (newWords.length > maxWordHistory) {\n        newWords.shift();\n        newRhymes.shift();\n        nextFirstIndex -= 1;\n        nextSecondIndex -= 1;\n      }\n\n      setRhymes(newRhymes);\n      setWords(newWords);\n    }\n\n    if (showFirst && firstIndex > secondIndex) nextSecondIndex += 2;\n    if (!showFirst && secondIndex > firstIndex) nextFirstIndex += 2;\n    setFirstIndex(nextFirstIndex);\n    setSecondIndex(nextSecondIndex);\n    setShowFirst(!showFirst);\n    setForward(true);\n  }\n\n  function canGoBack() {\n    const minValue = forward ? 0 : 1;\n    if (Math.min(firstIndex, secondIndex) < minValue) return false;\n    return true;\n  }\n\n  function previousWord() {\n    if (!canGoBack()) return;\n    setForward(false);\n    setShowFirst(!showFirst);\n    if (showFirst && firstIndex > secondIndex) return;\n    if (!showFirst && secondIndex > firstIndex) return;\n    if (showFirst) setSecondIndex(secondIndex - 2);else setFirstIndex(firstIndex - 2);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"words\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(WordsDisplay, {\n    word: words[firstIndex],\n    visible: showFirst,\n    onComplete: () => forwardWord(),\n    forward: forward,\n    rhymes: rhymes[firstIndex],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(WordsDisplay, {\n    word: words[secondIndex],\n    visible: !showFirst,\n    onComplete: () => forwardWord(),\n    forward: forward,\n    rhymes: rhymes[firstIndex],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ProgressBar, {\n    onComplete: () => forwardWord(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chevron-button\",\n    onClick: () => previousWord(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Chevrons, {\n    enabled: canGoBack(),\n    left: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chevron-button right\",\n    onClick: () => forwardWord(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Chevrons, {\n    enabled: true,\n    left: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default Words;","map":{"version":3,"sources":["C:/Users/Peran/LyricNinja/Lyric_Ninja/src/components/Words.tsx"],"names":["React","useState","ProgressBar","WordsDisplay","Chevrons","Words","words","setWords","rhymes","setRhymes","showFirst","setShowFirst","firstIndex","setFirstIndex","secondIndex","setSecondIndex","counter","setCounter","forward","setForward","maxWordHistory","getRhymes","word","getNewWord","forwardWord","nextFirstIndex","nextSecondIndex","Math","max","length","newWords","newWord","console","log","newRhymes","push","shift","canGoBack","minValue","min","previousWord"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport ProgressBar from './ProgressBar'\r\nimport WordsDisplay from './WordsDisplay'\r\nimport Chevrons from './Chevrons'\r\n\r\ninterface WordsProps {\r\n}\r\n\r\n\r\nconst Words: React.FC<WordsProps> = () => {\r\n\r\n\r\n    // const [words, setCurrentWord] = useState(\"apple\");\r\n    // const [nextWord, setNextWord] = useState(\"aa\");\r\n    const [words, setWords] = useState([\"apple\", \"banana\"]);\r\n    const [rhymes, setRhymes] = useState([[\"apple\", \"banana\", \"cat\", \"dog\", \"apple\", \"banana\", \"cat\", \"dog\"], [\"apple\", \"banana\", \"cat\", \"dog\", \"apple\", \"banana\", \"cat\", \"dog\"]]);\r\n    const [showFirst, setShowFirst] = useState(true);\r\n    const [firstIndex, setFirstIndex] = useState(0);\r\n    const [secondIndex, setSecondIndex] = useState(-1);\r\n    const [counter, setCounter] = useState(0);\r\n    const [forward, setForward] = useState(true);\r\n    const maxWordHistory = 6;\r\n\r\n    function getRhymes(word: string) {\r\n        return [word+\"1\", word+\"2\", word+\"3\", word+\"4\", word+\"5\", word+\"6\", word+\"7\", word+\"8\"];\r\n    }\r\n    \r\n    function getNewWord() {\r\n        setCounter(counter+1);\r\n        return \"extra\"+counter;\r\n    }\r\n\r\n    function forwardWord() {\r\n        let nextFirstIndex = firstIndex;\r\n        let nextSecondIndex = secondIndex;\r\n        if (Math.max(secondIndex, firstIndex)+1 >= words.length) {\r\n            const newWords = [...words];\r\n            const newWord = getNewWord();\r\n            console.log(newWord);\r\n            const newRhymes = [...rhymes];\r\n            console.log(newRhymes);\r\n            newRhymes.push(getRhymes(newWord));\r\n            newWords.push(newWord);\r\n            if (newWords.length > maxWordHistory) {\r\n                newWords.shift();\r\n                newRhymes.shift();\r\n                nextFirstIndex -= 1;\r\n                nextSecondIndex -= 1;\r\n            } \r\n            setRhymes(newRhymes);\r\n            setWords(newWords);\r\n        }     \r\n\r\n        if (showFirst && firstIndex > secondIndex) nextSecondIndex += 2;\r\n        if (!showFirst && secondIndex > firstIndex) nextFirstIndex += 2;\r\n\r\n        setFirstIndex(nextFirstIndex);\r\n        setSecondIndex(nextSecondIndex);\r\n        setShowFirst(!showFirst);\r\n        setForward(true);\r\n    }\r\n\r\n    function canGoBack() {\r\n        const minValue = forward ? 0 : 1\r\n        if (Math.min(firstIndex, secondIndex) < minValue) return false;\r\n        return true;\r\n    }\r\n\r\n    function previousWord() {\r\n        if (!canGoBack()) return;\r\n        setForward(false);\r\n        setShowFirst(!showFirst);\r\n\r\n        if (showFirst && firstIndex > secondIndex) return;\r\n        if (!showFirst && secondIndex > firstIndex) return;\r\n        if (showFirst) setSecondIndex(secondIndex-2);\r\n        else setFirstIndex(firstIndex-2);       \r\n    }\r\n\r\n    return (\r\n        <div className=\"words\">\r\n            <WordsDisplay word={words[firstIndex]} visible={showFirst} onComplete={() => forwardWord()} forward={forward} rhymes={rhymes[firstIndex]}></WordsDisplay>\r\n            <WordsDisplay word={words[secondIndex]} visible={!showFirst} onComplete={() => forwardWord()} forward={forward} rhymes={rhymes[firstIndex]}></WordsDisplay>\r\n            <ProgressBar onComplete={() => forwardWord()}></ProgressBar>\r\n            <div className=\"chevron-button\" onClick={() => previousWord()}>\r\n                <Chevrons enabled={ canGoBack() } left={ true } ></Chevrons> \r\n            </div>\r\n            <div className=\"chevron-button right\" onClick={() => forwardWord()}>\r\n                <Chevrons enabled={ true } left={ false } ></Chevrons> \r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Words;\r\n  "]},"metadata":{},"sourceType":"module"}