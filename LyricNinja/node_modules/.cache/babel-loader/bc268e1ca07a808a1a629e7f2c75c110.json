{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Peran\\\\LyricNinja\\\\Lyric_Ninja\\\\src\\\\components\\\\MainWord.tsx\";\nimport React, { useState, useEffect, useRef } from 'react';\n\nconst MainWord = ({\n  word,\n  nextWord,\n  position\n}) => {\n  const [progress, setProgress] = useState(0);\n  const duration = 1;\n  const animationFrameHandle = useRef(0);\n  const prevTime = useRef(performance.now());\n  const outputValueRange = 1;\n\n  function ease(x) {\n    return x * x;\n  }\n\n  useEffect(() => {\n    function render(timestamp) {\n      if (position === 0) {\n        setProgress(oldValue => {\n          if (oldValue >= 1) return 0;\n          const secondsElapsed = (timestamp - prevTime.current) / 1000;\n          return oldValue + outputValueRange * secondsElapsed / duration;\n        });\n        prevTime.current = timestamp;\n        animationFrameHandle.current = requestAnimationFrame(render);\n      }\n    }\n\n    render(performance.now());\n    return () => cancelAnimationFrame(animationFrameHandle.current);\n  }, [position]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main-word\",\n    style: {\n      opacity: -ease(progress),\n      transform: `translateX(${-100 * ease(progress)}%)`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, word);\n};\n\nexport default MainWord;","map":{"version":3,"sources":["C:/Users/Peran/LyricNinja/Lyric_Ninja/src/components/MainWord.tsx"],"names":["React","useState","useEffect","useRef","MainWord","word","nextWord","position","progress","setProgress","duration","animationFrameHandle","prevTime","performance","now","outputValueRange","ease","x","render","timestamp","oldValue","secondsElapsed","current","requestAnimationFrame","cancelAnimationFrame","opacity","transform"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;;AAUA,MAAMC,QAAiC,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA;AAAlB,CAAD,KAAiC;AAGvE,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAMS,QAAQ,GAAG,CAAjB;AACA,QAAMC,oBAAoB,GAAGR,MAAM,CAAC,CAAD,CAAnC;AACA,QAAMS,QAAQ,GAAGT,MAAM,CAACU,WAAW,CAACC,GAAZ,EAAD,CAAvB;AACA,QAAMC,gBAAgB,GAAG,CAAzB;;AAEA,WAASC,IAAT,CAAcC,CAAd,EAAiC;AAC/B,WAAOA,CAAC,GAACA,CAAT;AACD;;AAEDf,EAAAA,SAAS,CAAC,MAAM;AAEZ,aAASgB,MAAT,CAAgBC,SAAhB,EAAgD;AAC5C,UAAIZ,QAAQ,KAAK,CAAjB,EAAoB;AAChBE,QAAAA,WAAW,CAACW,QAAQ,IAAI;AACxB,cAAIA,QAAQ,IAAI,CAAhB,EAAmB,OAAO,CAAP;AACnB,gBAAMC,cAAc,GAAG,CAACF,SAAS,GAAGP,QAAQ,CAACU,OAAtB,IAAiC,IAAxD;AACA,iBAAOF,QAAQ,GAAGL,gBAAgB,GAAGM,cAAnB,GAAoCX,QAAtD;AACC,SAJU,CAAX;AAKAE,QAAAA,QAAQ,CAACU,OAAT,GAAmBH,SAAnB;AACAR,QAAAA,oBAAoB,CAACW,OAArB,GAA+BC,qBAAqB,CAACL,MAAD,CAApD;AACH;AACJ;;AAEDA,IAAAA,MAAM,CAACL,WAAW,CAACC,GAAZ,EAAD,CAAN;AACA,WAAO,MAAMU,oBAAoB,CAACb,oBAAoB,CAACW,OAAtB,CAAjC;AACH,GAhBQ,EAgBN,CAACf,QAAD,CAhBM,CAAT;AAmBA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAA2B,IAAA,KAAK,EAAE;AAAEkB,MAAAA,OAAO,EAAE,CAACT,IAAI,CAACR,QAAD,CAAhB;AAA4BkB,MAAAA,SAAS,EAAG,cAAa,CAAC,GAAD,GAAKV,IAAI,CAACR,QAAD,CAAW;AAAzE,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,IADH,CADJ;AAKD,CArCH;;AAuCA,eAAeD,QAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\n\r\ninterface MainWordProps {\r\n  word: string;\r\n  nextWord: string;\r\n  position: number;\r\n}\r\n\r\n\r\nconst MainWord: React.FC<MainWordProps> = ({ word, nextWord, position}) => {\r\n\r\n\r\n    const [progress, setProgress] = useState(0);\r\n    const duration = 1;\r\n    const animationFrameHandle = useRef(0);\r\n    const prevTime = useRef(performance.now());\r\n    const outputValueRange = 1;\r\n\r\n    function ease(x: number): number {\r\n      return x*x;\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        function render(timestamp: DOMHighResTimeStamp) {\r\n            if (position === 0) {\r\n                setProgress(oldValue => {\r\n                if (oldValue >= 1) return 0;\r\n                const secondsElapsed = (timestamp - prevTime.current) / 1000;\r\n                return oldValue + outputValueRange * secondsElapsed / duration;\r\n                })\r\n                prevTime.current = timestamp;\r\n                animationFrameHandle.current = requestAnimationFrame(render);\r\n            }\r\n        }\r\n\r\n        render(performance.now());\r\n        return () => cancelAnimationFrame(animationFrameHandle.current);\r\n    }, [position])\r\n\r\n\r\n    return (\r\n        <div className=\"main-word\" style={{ opacity: -ease(progress), transform: `translateX(${-100*ease(progress)}%)`}}>\r\n          {word}\r\n        </div>\r\n    );\r\n  };\r\n\r\nexport default MainWord;\r\n  "]},"metadata":{},"sourceType":"module"}