{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Peran\\\\LyricNinja\\\\Lyric_Ninja\\\\src\\\\components\\\\MainWord.tsx\";\nimport React, { useState, useEffect, useRef } from 'react';\n\nconst MainWord = ({\n  word,\n  visible\n}) => {\n  const [progress, setProgress] = useState(0);\n  const [wordToShow, setWordToShow] = useState(word);\n  const duration = 3;\n  const animationFrameHandle = useRef(0);\n  const prevTime = useRef(performance.now());\n  const outputValueRange = 1;\n\n  function easeIn(x) {\n    return Math.pow(Math.min(1, x * 2), 2);\n  }\n\n  function easeOut(x) {\n    return 1 - Math.pow(1 - x, 3); //1 - Math.pow(1 - x, 1.5);\n  }\n\n  useEffect(() => {\n    if (progress > 0) {\n      cancelAnimationFrame(animationFrameHandle.current);\n      visible = !visible; // setWordToShow(word);\n\n      setProgress(0);\n    }\n\n    prevTime.current = performance.now();\n\n    function render(timestamp) {\n      animationFrameHandle.current = requestAnimationFrame(render);\n      setProgress(oldValue => {\n        if (oldValue >= 1) {\n          cancelAnimationFrame(animationFrameHandle.current);\n          visible = !visible;\n          setWordToShow(word);\n          return 0;\n        }\n\n        const secondsElapsed = (timestamp - prevTime.current) / 1000;\n        return Math.min(oldValue + outputValueRange * secondsElapsed / duration, 1);\n      });\n      prevTime.current = timestamp;\n    }\n\n    render(performance.now());\n    return () => cancelAnimationFrame(animationFrameHandle.current);\n  }, [visible, word]);\n\n  if (visible) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main-word\",\n      style: {\n        opacity: 1 - 1.2 * easeIn(progress),\n        transform: `translateX(${-100 * easeIn(progress)}%)`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }, wordToShow);\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main-word\",\n      style: {\n        opacity: easeOut(progress),\n        transform: `translateX(${100 - 100 * easeOut(progress)}%)`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, word);\n  }\n};\n\nexport default MainWord;","map":{"version":3,"sources":["C:/Users/Peran/LyricNinja/Lyric_Ninja/src/components/MainWord.tsx"],"names":["React","useState","useEffect","useRef","MainWord","word","visible","progress","setProgress","wordToShow","setWordToShow","duration","animationFrameHandle","prevTime","performance","now","outputValueRange","easeIn","x","Math","pow","min","easeOut","cancelAnimationFrame","current","render","timestamp","requestAnimationFrame","oldValue","secondsElapsed","opacity","transform"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\n\r\ninterface MainWordProps {\r\n  displayedWord: string;\r\n  word: string;\r\n  visible: boolean;\r\n}\r\n\r\n\r\nconst MainWord: React.FC<MainWordProps> = ({ word, visible}) => {\r\n\r\n    const [progress, setProgress] = useState(0);\r\n    const [wordToShow, setWordToShow] = useState(word);\r\n    const duration = 3;\r\n    const animationFrameHandle = useRef(0);\r\n    const prevTime = useRef(performance.now());\r\n    const outputValueRange = 1;\r\n\r\n    function easeIn(x: number): number {\r\n        return Math.pow(Math.min(1, x*2), 2);\r\n    }\r\n\r\n    function easeOut(x: number): number {\r\n        return 1 - Math.pow(1 - x, 3); //1 - Math.pow(1 - x, 1.5);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (progress > 0) {\r\n            cancelAnimationFrame(animationFrameHandle.current);\r\n            visible = !visible;\r\n            // setWordToShow(word);\r\n            setProgress(0);\r\n        }\r\n        prevTime.current = performance.now();\r\n        function render(timestamp: DOMHighResTimeStamp) {\r\n            animationFrameHandle.current = requestAnimationFrame(render);\r\n            setProgress(oldValue => {\r\n                if (oldValue >= 1) {\r\n                    cancelAnimationFrame(animationFrameHandle.current);\r\n                    visible = !visible;\r\n                    setWordToShow(word);\r\n                    return 0;\r\n                } \r\n                const secondsElapsed = (timestamp - prevTime.current) / 1000;\r\n                return Math.min(oldValue + outputValueRange * secondsElapsed / duration, 1);\r\n            })\r\n            prevTime.current = timestamp;\r\n        }\r\n\r\n        render(performance.now());\r\n        return () => cancelAnimationFrame(animationFrameHandle.current);\r\n    }, [visible, word])\r\n    if (visible) {\r\n        return (\r\n            <div className=\"main-word\" style={{ opacity: 1-1.2*easeIn(progress), transform: `translateX(${-100*easeIn(progress)}%)`}}>\r\n              {wordToShow}\r\n            </div>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <div className=\"main-word\" style={{ opacity: easeOut(progress), transform: `translateX(${100-100*easeOut(progress)}%)`}}>\r\n                {word}\r\n            </div>\r\n        );\r\n    }\r\n  };\r\n\r\nexport default MainWord;\r\n  "]},"metadata":{},"sourceType":"module"}