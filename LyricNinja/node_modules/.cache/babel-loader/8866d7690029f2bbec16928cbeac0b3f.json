{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Peran\\\\LyricNinja\\\\Lyric_Ninja\\\\src\\\\components\\\\MainWord.tsx\";\nimport React, { useState, useEffect, useRef } from 'react';\n\nconst MainWord = ({\n  word,\n  visible,\n  onComplete,\n  forward\n}) => {\n  const [progress, setProgress] = useState(0);\n  const duration = 0.3;\n  const animationFrameHandle = useRef(0);\n  const prevTime = useRef(performance.now());\n  const outputValueRange = 1;\n\n  function easeIn(x) {\n    return 1 - Math.cos(x * Math.PI / 2);\n  }\n\n  function easeOut(x) {\n    return Math.sin(x * Math.PI / 2);\n    ;\n  }\n\n  useEffect(() => {\n    console.log(\"useEffect\");\n    setProgress(0); // console.log(\"Visible: \"+visible+\" wordIndex: \"+wordIndex);\n\n    prevTime.current = performance.now();\n\n    function render(timestamp) {\n      animationFrameHandle.current = requestAnimationFrame(render);\n      setProgress(oldValue => {\n        if (oldValue >= 1) {\n          cancelAnimationFrame(animationFrameHandle.current);\n          return 0;\n        }\n\n        const secondsElapsed = (timestamp - prevTime.current) / 1000;\n        return Math.max(0, Math.min(oldValue + outputValueRange * secondsElapsed / duration, 1));\n      });\n      prevTime.current = timestamp;\n    }\n\n    render(performance.now());\n    return () => cancelAnimationFrame(animationFrameHandle.current);\n  }, [onComplete]);\n\n  if (visible) {\n    return (\n      /*#__PURE__*/\n      // <div className=\"main-word\" style={{ opacity: 1-1.2*easeIn(progress), transform: `translateX(${-100*easeIn(progress)}%)`}}>\n      //   {words[wordIndex]}\n      // </div>\n      React.createElement(\"div\", {\n        className: \"main-word\",\n        style: {\n          opacity: progress == 0 ? 1 : easeOut(progress),\n          transform: `translateX(${progress == 0 ? 0 : 100 - 100 * easeOut(progress)}%)`\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }\n      }, word)\n    );\n  } else {\n    let op = progress == 0 ? 0 : 1 - easeIn(progress) * 1.3;\n    let pos = -100 * easeIn(progress);\n    return (\n      /*#__PURE__*/\n      // <div className=\"main-word\" style={{ opacity: easeOut(progress), transform: `translateX(${100-100*easeOut(progress)}%)`}}>\n      //     {(wordIndex < 0)? \"b\": words[wordIndex-1]}\n      // </div>\n      React.createElement(\"div\", {\n        className: \"main-word\",\n        style: {\n          opacity: op,\n          transform: `translateX(${pos}%)`\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }\n      }, word)\n    );\n  }\n};\n\nexport default MainWord;","map":{"version":3,"sources":["C:/Users/Peran/LyricNinja/Lyric_Ninja/src/components/MainWord.tsx"],"names":["React","useState","useEffect","useRef","MainWord","word","visible","onComplete","forward","progress","setProgress","duration","animationFrameHandle","prevTime","performance","now","outputValueRange","easeIn","x","Math","cos","PI","easeOut","sin","console","log","current","render","timestamp","requestAnimationFrame","oldValue","cancelAnimationFrame","secondsElapsed","max","min","opacity","transform","op","pos"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\n\r\ninterface MainWordProps {\r\n    onComplete: any;\r\n    word: string;\r\n    visible: boolean;\r\n    forward: boolean;\r\n}\r\n\r\n\r\nconst MainWord: React.FC<MainWordProps> = ({word, visible, onComplete, forward}) => {\r\n\r\n    const [progress, setProgress] = useState(0);\r\n    const duration = 0.3;\r\n    const animationFrameHandle = useRef(0);\r\n    const prevTime = useRef(performance.now());\r\n    const outputValueRange = 1;\r\n\r\n    function easeIn(x: number): number {\r\n        return 1 - Math.cos((x * Math.PI) / 2);\r\n    }\r\n\r\n    function easeOut(x: number): number {\r\n        return Math.sin((x * Math.PI) / 2);;\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(\"useEffect\");\r\n        setProgress(0);\r\n        // console.log(\"Visible: \"+visible+\" wordIndex: \"+wordIndex);\r\n        prevTime.current = performance.now();\r\n        function render(timestamp: DOMHighResTimeStamp) {\r\n            animationFrameHandle.current = requestAnimationFrame(render);\r\n            setProgress(oldValue => {\r\n                if (oldValue >= 1) {\r\n                    \r\n                    cancelAnimationFrame(animationFrameHandle.current);\r\n                    \r\n                    return 0;\r\n                } \r\n                const secondsElapsed = (timestamp - prevTime.current) / 1000;\r\n                return Math.max(0, Math.min(oldValue + outputValueRange * secondsElapsed / duration, 1));\r\n            })\r\n            prevTime.current = timestamp;\r\n        }\r\n\r\n        render(performance.now());\r\n        return () => cancelAnimationFrame(animationFrameHandle.current);\r\n    }, [onComplete]);\r\n    \r\n    if (visible) {\r\n        return (\r\n            // <div className=\"main-word\" style={{ opacity: 1-1.2*easeIn(progress), transform: `translateX(${-100*easeIn(progress)}%)`}}>\r\n            //   {words[wordIndex]}\r\n            // </div>\r\n            <div className=\"main-word\" style={{ opacity: (progress == 0) ? 1 : easeOut(progress), transform: `translateX(${(progress == 0) ? 0 : 100-100*easeOut(progress)}%)`}}>\r\n              {word}\r\n            </div>\r\n        );\r\n    }\r\n    else {\r\n        let op = (progress == 0) ? 0 : 1-easeIn(progress)*1.3;\r\n        let pos = -100*easeIn(progress);\r\n        return (\r\n            // <div className=\"main-word\" style={{ opacity: easeOut(progress), transform: `translateX(${100-100*easeOut(progress)}%)`}}>\r\n            //     {(wordIndex < 0)? \"b\": words[wordIndex-1]}\r\n            // </div>\r\n            <div className=\"main-word\" style={{ opacity: op, transform: `translateX(${pos}%)` }}>\r\n                {word}\r\n            </div>\r\n        );\r\n    }\r\n  };\r\n\r\nexport default MainWord;\r\n  "]},"metadata":{},"sourceType":"module"}