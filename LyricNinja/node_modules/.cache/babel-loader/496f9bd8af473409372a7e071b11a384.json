{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Peran\\\\LyricNinja\\\\Lyric_Ninja\\\\src\\\\components\\\\Words.tsx\";\nimport React, { useState, useRef } from 'react';\nimport ProgressBar from './ProgressBar';\nimport MainWord from './MainWord';\n\nconst Words = ({\n  words: words,\n  index: index\n}) => {\n  const [progress, setProgress] = useState(0);\n  const duration = 10;\n  const animationFrameHandle = useRef(0);\n  const prevTime = useRef(performance.now());\n  const outputValueRange = 1; // function ease(x: number): number {\n  //   return x;\n  // }\n  // useEffect(() => {\n  //   function render(timestamp: DOMHighResTimeStamp) {\n  //     setProgress(oldValue => {\n  //       if (oldValue >= 1) {\n  //         if (onComplete) onComplete();\n  //         return 0;\n  //       }\n  //       const secondsElapsed = (timestamp - prevTime.current) / 1000;\n  //       return oldValue + outputValueRange * secondsElapsed / duration;\n  //     })\n  //     prevTime.current = timestamp;\n  //     animationFrameHandle.current = requestAnimationFrame(render);\n  //   }\n  //   render(performance.now());\n  //   return () => cancelAnimationFrame(animationFrameHandle.current);\n  // }, [onComplete])\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MainWord, {\n    word: \"first\",\n    opacity: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(MainWord, {\n    word: \"second\",\n    opacity: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ProgressBar, {\n    onComplete: () => console.log(\"Complete!\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default Words;","map":{"version":3,"sources":["C:/Users/Peran/LyricNinja/Lyric_Ninja/src/components/Words.tsx"],"names":["React","useState","useRef","ProgressBar","MainWord","Words","words","index","progress","setProgress","duration","animationFrameHandle","prevTime","performance","now","outputValueRange","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAqCC,MAArC,QAAmD,OAAnD;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAQA,MAAMC,KAA2B,GAAG,CAAC;AAAEC,EAAAA,KAAK,EAAEA,KAAT;AAAgBC,EAAAA,KAAK,EAAEA;AAAvB,CAAD,KAAoC;AAGpE,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAMS,QAAQ,GAAG,EAAjB;AACA,QAAMC,oBAAoB,GAAGT,MAAM,CAAC,CAAD,CAAnC;AACA,QAAMU,QAAQ,GAAGV,MAAM,CAACW,WAAW,CAACC,GAAZ,EAAD,CAAvB;AACA,QAAMC,gBAAgB,GAAG,CAAzB,CAPoE,CASpE;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAGA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAE,OAAhB;AAAyB,IAAA,OAAO,EAAE,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,eAEA,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAE,QAAhB;AAA0B,IAAA,OAAO,EAAE,CAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,eAGA,oBAAC,WAAD;AAAa,IAAA,UAAU,EAAE,MAAMC,OAAO,CAACC,GAAR,CAAY,WAAZ,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHA,CADJ;AAOD,CAzCH;;AA2CA,eAAeZ,KAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\nimport ProgressBar from './ProgressBar'\r\nimport MainWord from './MainWord'\r\n\r\ninterface WordsProps {\r\n  words: string[];\r\n  index: number;\r\n}\r\n\r\n\r\nconst Words: React.FC<WordsProps> = ({ words: words, index: index }) => {\r\n\r\n\r\n    const [progress, setProgress] = useState(0);\r\n    const duration = 10;\r\n    const animationFrameHandle = useRef(0);\r\n    const prevTime = useRef(performance.now());\r\n    const outputValueRange = 1;\r\n\r\n    // function ease(x: number): number {\r\n    //   return x;\r\n    // }\r\n\r\n    // useEffect(() => {\r\n\r\n    //   function render(timestamp: DOMHighResTimeStamp) {\r\n    //     setProgress(oldValue => {\r\n    //       if (oldValue >= 1) {\r\n    //         if (onComplete) onComplete();\r\n    //         return 0;\r\n    //       }\r\n    //       const secondsElapsed = (timestamp - prevTime.current) / 1000;\r\n    //       return oldValue + outputValueRange * secondsElapsed / duration;\r\n    //     })\r\n    //     prevTime.current = timestamp;\r\n    //     animationFrameHandle.current = requestAnimationFrame(render);\r\n\r\n    //   }\r\n\r\n    //   render(performance.now());\r\n    //   return () => cancelAnimationFrame(animationFrameHandle.current);\r\n    // }, [onComplete])\r\n\r\n\r\n    return (\r\n        <div>\r\n        <MainWord word={\"first\"} opacity={1}></MainWord>\r\n        <MainWord word={\"second\"} opacity={1}></MainWord>\r\n        <ProgressBar onComplete={() => console.log(\"Complete!\")}></ProgressBar>\r\n        </div>\r\n    );\r\n  };\r\n\r\nexport default Words;\r\n  "]},"metadata":{},"sourceType":"module"}