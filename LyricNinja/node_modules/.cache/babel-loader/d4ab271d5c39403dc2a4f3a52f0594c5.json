{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Peran\\\\LyricNinja\\\\Lyric_Ninja\\\\src\\\\components\\\\ProgressBar.tsx\";\nimport React, { useState, useEffect, useRef } from 'react';\n\nconst ProgressBar = ({\n  onComplete\n}) => {\n  const [progress, setProgress] = useState(0);\n  const duration = 10;\n  const animationFrameHandle = useRef(0);\n  const prevTime = useRef(performance.now());\n  useEffect(() => {\n    function render(timestamp) {\n      setProgress(oldValue => {\n        if (oldValue >= 1) {\n          if (onComplete) onComplete();\n          return 0;\n        }\n\n        const secondsElapsed = (timestamp - prevTime.current) / 1000;\n        return oldValue + secondsElapsed / duration;\n      });\n      prevTime.current = timestamp;\n      animationFrameHandle.current = requestAnimationFrame(render);\n    }\n\n    render(performance.now());\n    return () => cancelAnimationFrame(animationFrameHandle.current);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"word-bar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    style: {\n      transform: `scaleX(${progress})`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }));\n};\n\nexport default ProgressBar;","map":{"version":3,"sources":["C:/Users/Peran/LyricNinja/Lyric_Ninja/src/components/ProgressBar.tsx"],"names":["React","useState","useEffect","useRef","ProgressBar","onComplete","progress","setProgress","duration","animationFrameHandle","prevTime","performance","now","render","timestamp","oldValue","secondsElapsed","current","requestAnimationFrame","cancelAnimationFrame","transform"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;;AASA,MAAMC,WAAuC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoB;AAGhE,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAMO,QAAQ,GAAG,EAAjB;AACA,QAAMC,oBAAoB,GAAGN,MAAM,CAAC,CAAD,CAAnC;AACA,QAAMO,QAAQ,GAAGP,MAAM,CAACQ,WAAW,CAACC,GAAZ,EAAD,CAAvB;AAEAV,EAAAA,SAAS,CAAC,MAAM;AAEd,aAASW,MAAT,CAAgBC,SAAhB,EAAgD;AAC9CP,MAAAA,WAAW,CAACQ,QAAQ,IAAI;AACtB,YAAIA,QAAQ,IAAI,CAAhB,EAAmB;AACjB,cAAIV,UAAJ,EAAgBA,UAAU;AAC1B,iBAAO,CAAP;AACD;;AACD,cAAMW,cAAc,GAAG,CAACF,SAAS,GAAGJ,QAAQ,CAACO,OAAtB,IAAiC,IAAxD;AACA,eAAOF,QAAQ,GAAGC,cAAc,GAAGR,QAAnC;AACD,OAPU,CAAX;AAQAE,MAAAA,QAAQ,CAACO,OAAT,GAAmBH,SAAnB;AACAL,MAAAA,oBAAoB,CAACQ,OAArB,GAA+BC,qBAAqB,CAACL,MAAD,CAApD;AAED;;AAEDA,IAAAA,MAAM,CAACF,WAAW,CAACC,GAAZ,EAAD,CAAN;AAEA,WAAO,MAAMO,oBAAoB,CAACV,oBAAoB,CAACQ,OAAtB,CAAjC;AACD,GAnBQ,EAmBN,EAnBM,CAAT;AAsBA,sBACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAA8B,IAAA,KAAK,EAAE;AAAEG,MAAAA,SAAS,EAAG,UAASd,QAAS;AAAhC,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADJ;AAKD,CAnCH;;AAqCA,eAAeF,WAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { IonProgressBar } from '@ionic/react';\r\n\r\n\r\ninterface ProgressBarProps {\r\n  onComplete: any\r\n}\r\n\r\n\r\nconst ProgressBar: React.FC<ProgressBarProps> = ({ onComplete }) => {\r\n\r\n\r\n    const [progress, setProgress] = useState(0);\r\n    const duration = 10;\r\n    const animationFrameHandle = useRef(0);\r\n    const prevTime = useRef(performance.now());\r\n\r\n    useEffect(() => {\r\n\r\n      function render(timestamp: DOMHighResTimeStamp) {\r\n        setProgress(oldValue => {\r\n          if (oldValue >= 1) {\r\n            if (onComplete) onComplete();\r\n            return 0;\r\n          }\r\n          const secondsElapsed = (timestamp - prevTime.current) / 1000;\r\n          return oldValue + secondsElapsed / duration;\r\n        })\r\n        prevTime.current = timestamp;\r\n        animationFrameHandle.current = requestAnimationFrame(render);\r\n\r\n      }\r\n\r\n      render(performance.now());\r\n\r\n      return () => cancelAnimationFrame(animationFrameHandle.current);\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className=\"word-bar\">\r\n          <div className=\"progress-bar\" style={{ transform: `scaleX(${progress})` }} />\r\n        </div>\r\n    );\r\n  };\r\n\r\nexport default ProgressBar;\r\n  "]},"metadata":{},"sourceType":"module"}